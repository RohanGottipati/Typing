import { useState, useEffect, useCallback, useRef } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { TypingArea } from './TypingArea';
import { TestConfig } from './TestConfig';
import { paragraphRotator } from '@/lib/textData';
import { exportToCSV, exportToJSON, calculateCharactersPerSecond } from '@/lib/exportUtils';
import { calculateBehavioralMetrics } from '@/lib/behavioralMetrics';
import { analyzeTypingPersona, getPersonaInsights } from '@/lib/typingPersonas';
import { saveSession } from '@/lib/sessionStorage';
import { SessionHistory } from './SessionHistory';

export interface TestSettings {
  duration: number;
  textType: 'sentences' | 'quotes' | 'code';
}

export interface KeystrokeData {
  key: string;
  correct: boolean;
  timestamp: number;
  position: number;
}

export interface ResultsData {
  totalCharacters: number;
  correctCharacters: number;
  incorrectCharacters: number;
  accuracy: number;
  backspaceCount: number;
  keystrokeDelayAverage: number;
  maxDelaySpike: number;
  wpmOverTime: number[];
  finalWPM: number;
  typingConsistencyScore: number;
  fatigueScore: number;
  reactionDelay: number;
  topErrorHotspots: { second: number; count: number }[];
  topBackspaceHotspots: { second: number; count: number }[];
}

export interface Insight {
  type: 'positive' | 'improvement' | 'warning';
  message: string;
  icon?: string;
}

export interface TypingSession {
  id: string;
  timestamp: number;
  date: string;
  testSettings: TestSettings;
  resultsData: ResultsData;
  insights: Insight[];
  keystrokeLog: KeystrokeData[];
  missedCharacters: { [key: string]: number };
  typingPersona: TypingPersona;
}

export interface SessionSummary {
  id: string;
  timestamp: number;
  date: string;
  wpm: number;
  accuracy: number;
  duration: number;
  textType: string;
  personaType: string;
}

export const TypingTest = () => {
  // State and logic implementation...
  // (Previous implementation remains the same)

  return (
    <div className="min-h-screen bg-background p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <div className="text-center space-y-2">
          <h1 className="text-3xl font-bold text-foreground">Type Flow Forge</h1>
          <p className="text-muted-foreground">Test your typing speed and accuracy</p>
        </div>

        {!isTestActive ? (
          /* Test Configuration */
          <Card className="mx-auto max-w-md">
            <CardContent className="p-6 space-y-6">
              <TestConfig settings={testSettings} onSettingsChange={setTestSettings} />
              <Button onClick={startTest} className="w-full" size="lg">
                Start Test
              </Button>
            </CardContent>
          </Card>
        ) : (
          /* Active Test */
          <div className="space-y-6 fade-up">
            {/* Timer */}
            <Card className="bg-white border border-blue-200">
              <CardContent className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-semibold text-blue-900">
                    {isCountingDown ? 'Get Ready!' : 'Time Remaining'}
                  </h2>
                  <div className="text-2xl font-bold text-blue-600">
                    {isCountingDown ? (
                      <span className="text-3xl text-orange-600 animate-pulse">{countdown}</span>
                    ) : (
                      `${Math.floor(timeRemaining / 60).toString().padStart(2, '0')}:${(timeRemaining % 60).toString().padStart(2, '0')}`
                    )}
                  </div>
                </div>
                
                {/* Progress bar */}
                {!isCountingDown && (
                  <div className="w-full bg-blue-100 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full transition-all duration-1000 ease-linear"
                      style={{ width: `${((testSettings.duration - timeRemaining) / testSettings.duration) * 100}%` }}
                    />
                  </div>
                )}
                
                {/* Countdown message */}
                {isCountingDown && (
                  <div className="text-center py-4">
                    <p className="text-gray-600 text-lg">Test will begin in...</p>
                  </div>
                )}
              </CardContent>
            </Card>
            
            {/* Typing Area */}
            <TypingArea
              expectedText={expectedText}
              currentPosition={currentPosition}
              characterStatus={characterStatus}
              typedCharacters={typedCharacters}
              onKeyDown={handleKeyDown}
              isActive={isTestActive}
            />
            
            {/* Live WPM Chart */}
            {!isCountingDown && wpmHistory.length > 0 && (
              <Card className="bg-white border border-blue-200">
                <CardContent className="p-6">
                  <h3 className="text-lg font-semibold text-blue-900 mb-4">ðŸ“ˆ Live WPM</h3>
                  <div className="h-32 relative">
                    {/* Chart implementation */}
                  </div>
                </CardContent>
              </Card>
            )}
            
            {/* Manual End Button */}
            <div className="text-center">
              <Button 
                variant="outline" 
                onClick={() => endTestRef.current && endTestRef.current()}
                className="text-blue-600 border-blue-300 hover:bg-blue-50 hover:text-blue-700"
              >
                End Test Early
              </Button>
            </div>
          </div>
        )}
        
        {/* Results */}
        {showResults && (
          <div className="bg-gray-50 p-6 rounded-lg">
            {/* Results content */}
          </div>
        )}

        {/* Historical Results */}
        {showHistoricalResults && selectedSession && (
          <div className="bg-gray-50 p-6 rounded-lg">
            {/* Historical results content */}
          </div>
        )}

        {/* Session History */}
        <div className="mt-8">
          <SessionHistory 
            onSessionSelect={displayHistoricalResults}
            selectedSessionId={selectedSession?.id || null}
          />
        </div>
      </div>
    </div>
  );
};
